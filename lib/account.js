const axios = require("axios");

const Account = {};

// POST REQUEST TO PLACE AN ORDER options = {}
// symbol	STRING	*
// side	ENUM	*
// type	ENUM	*
// timeInForce	ENUM	*
// quantity	DECIMAL	*
// price	DECIMAL	*
// newClientOrderId	STRING		A unique id for the order. Automatically generated if not sent.
// stopPrice	DECIMAL		Used with stop orders
// icebergQty	DECIMAL		Used with iceberg orders
// recvWindow LONG
// timestamp	LONG	*
Account.placeOrder = function(options) {
  let queryOptions = this.formatQuery(options);
  let url = this.v3URL + "order";
  let data = queryOptions.slice(1) + this.sign(queryOptions.slice(1));
  return axios.post(url, data, this.headers);
};

// POST REQUEST TO TEST AN ORDER options = {}
// symbol	STRING	*
// side	ENUM	* (BUY/SELL)
// type	ENUM	* (MARKET/LIMIT)
// timeInForce	ENUM	*
// quantity	DECIMAL	*
// price	DECIMAL	*
// newClientOrderId	STRING		A unique id for the order. Automatically generated if not sent.
// stopPrice	DECIMAL		Used with stop orders
// icebergQty	DECIMAL		Used with iceberg orders
// recvWindow  LONG
// timestamp	LONG	*
Account.testNewOrder = function(options) {
  let queryOptions = this.formatQuery(options);
  let url = this.v3URL + "order/test";
  let data = queryOptions.slice(1) + this.sign(queryOptions.slice(1));
  return axios.post(url, data, this.headers);
};

// GET REQUEST FOR ORDER'S STATUS options = {}
// symbol	STRING	*
// orderId	LONG
// origClientOrderId	STRING
// recvWindow	LONG
// timestamp	LONG	*
Account.queryOrder = function(options) {
  let queryOptions = this.formatQuery(options);
  let url =
    this.v3URL + "order" + queryOptions + this.sign(queryOptions.slice(1));
  return axios.get(url, this.headers);
};

// DELETE REQUEST FOR PENDING ORDER BY ID options = {}
// symbol	STRING	*
// orderId	LONG
// origClientOrderId	STRING
// newClientOrderId   STRING   Used to uniquely identify this cancel. Automatically generated by default.
// recvWindow	LONG
// timestamp	LONG	*
Account.cancelOrder = function(options) {
  let queryOptions = this.formatQuery(options);
  let url =
    this.v3URL + "order" + queryOptions + this.sign(queryOptions.slice(1));
  return axios.delete(url, this.headers);
};

// GET REQUEST FOR OPEN ORDERS options = {}
// symbol	STRING	*
// recvWindow	LONG
// timestamp	LONG	*
Account.getOpenOrders = function(options) {
  let queryOptions = this.formatQuery(options);
  let url =
    this.v3URL + "openOrders" + queryOptions + this.sign(queryOptions.slice(1));
  return axios.get(url, this.headers);
};

// GET REQUEST FOR ALL ACCOUNT ORDERS (ACTIVE/CANCELLED/FILLED) options = {}
// symbol	 STRING	*
// orderId  LONG
// limit  INT   DEFAULT: 500, MAX: 500
// recvWindow LONG
// timestamp	LONG	*
Account.getAllOrders = function(options) {
  let queryOptions = this.formatQuery(options);
  let url =
    this.v3URL + "allOrders" + queryOptions + this.sign(queryOptions.slice(1));
  return axios.get(url, this.headers);
};

// GET REQUEST FOR ACCOUNT INFORMATION options = {}
// recWindow  LONG
// timestamp  LONG  *
Account.getAccountInfo = function(options) {
  let queryOptions = this.formatQuery(options);
  let url =
    this.v3URL + "account" + queryOptions + this.sign(queryOptions.slice(1));
  return axios.get(url, this.headers);
};

// GET REQUEST FOR ACCOUNT TRADE LIST options = {}
// symbol	STRING	*
// limit	INT 	Default 500; max 500.
// fromId	LONG	TradeId to fetch from. Default gets most recent trades.
// recvWindow	LONG
// timestamp	LONG	*
Account.getAccountTradeList = function(options) {
  let queryOptions = this.formatQuery(options);
  let url =
    this.v3URL + "myTrades" + queryOptions + this.sign(queryOptions.slice(1));
  return axios.get(url, this.headers);
};

// POST REQUEST for making a withdrawl options = {}
// asset	STRING	*
// address	STRING	*
// amount	  DECIMAL	*
// name	  STRING	Description of the address
// recvWindow	  LONG
// timestamp	  LONG	*
Account.makeWithdrawl = function(options) {
  let queryOptions = this.formatQuery(options);
  let url = this.v3WAPIURL + "withdraw.html";
  console.log(url);
  let data = queryOptions.slice(1) + this.sign(queryOptions.slice(1));
  return axios.post(url, data, this.headers);
};

// GET REQUEST for deposit history options = {}
// asset	STRING
// status	 INT	0(0:pending,1:success)
// startTime	LONG
// endTime	LONG
// recvWindow	LONG
// timestamp	LONG	*
Account.getDepositHistory = function(options) {
  let queryOptions = this.formatQuery(options);
  let url = this.v1URL + "getDepositHistory";
  let data = queryOptions.slice(1) + this.sign(queryOptions.slice(1));
  return axios.post(url, data, this.headers);
};

// GET REQUEST for withdrawl history options = {}
// asset	STRING
// status	INT		0(0:Email Sent,1:Cancelled 2:Awaiting Approval 3:Rejected 4:Processing 5:Failure 6Completed)
// startTime	LONG
// endTime	LONG
// recvWindow	LONG
// timestamp	LONG	*
Account.getWithdrawlHistory = function(options) {
  let queryOptions = this.formatQuery(options);
  let url = this.v1URL + "getWithdrawHistory";
  let data = queryOptions.slice(1) + this.sign(queryOptions.slice(1));
  return axios.post(url, data, this.headers);
};

// GET REQUEST for deposit address options = {}
// asset	STRING
// recvWindow	LONG
// timestamp	LONG	*
Account.getDepositAddress = function(options) {
  let queryOptions = this.formatQuery(options);
  let url =
    this.v3WAPIURL +
    "depositAddress.html" +
    queryOptions +
    this.sign(queryOptions.slice(1));

  return axios.get(url, this.headers);
};

module.exports = Account;
